db.restaurants.find(); // 01 - Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants
db.restaurants.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 02 - Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine de tots els documents en la col·lecció Restaurants
db.restaurants.find({},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 }); // 03 - Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloent el camp _id per tots els documents en la col·lecció Restaurants
db.restaurants.find({},{restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1, _id: 0}); // 04 - Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloent el camp _id per tots els documents en la col·lecció Restaurants
db.restaurants.find({ borough: "Bronx" }); // 05 - Escriu una consulta per mostrar tots els restaurants que estan en el Bronx
db.restaurants.find({ borough: "Bronx" }).limit(5); // 06 - Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx
db.restaurants.find({ borough: "Bronx" }).skip(5).limit(5); // 07 - Escriu una consulta per mostrar els 5 restaurants després de saltar els primers 5 que que siguin del Bronx
db.restaurants.find({ grades: { $elemMatch: { score: { $gt: 90} } } }); // 08 - Escriu una consulta per trobar els restaurants que tenen algun score més gran de 90
db.restaurants.find({ grades: { $elemMatch: { score: { $gt: 80, $lt: 100} } } }); // 09 - Escriu una consulta per trobar els restaurants que tenen un score més gran que 80 però menys que 100
db.restaurants.find({ "address.coord.0": { $lt: -95.754168 } }); // 10 - Escriu una consulta per trobar els restaurants que estan situats en termes de latitud inferiors a -95.754168
db.restaurants.find({ cuisine: { $not: /American/ }, grades: { $elemMatch: { score: { $gt: 70} } }, "address.coord.0": { $lt: -65.754168 } } ); // 11 - Escriu una consulta de MongoDB per a trobar els restaurants que no cuinen  menjar 'American' i tenen algun score superior a 70 i latitud inferior a -65.754168
db.restaurants.find({ cuisine: { $not: /American/ }, grades: { $elemMatch: { score: { $gt: 70} } }, "address.coord.0": { $lt: -65.754168 } } ); // TODO: PREGUNTA ¿no he usado el operador AND en la anterior, por lo que queda igual? // 12 - Escriu una consulta per trobar els restaurants que no preparen menjar 'American' i tenen algun score superior a 70 i que, a més,  és localitzen en longituds inferiors a -65.754168. Nota : Fes aquesta consulta sense utilitzar operador $and 
db.restaurants.find({ cuisine: { $not: /American/ }, grades: { $elemMatch: { grade: "A" } }, borough: { $not: /Brooklyn/ } }).sort({ cuisine: -1}); // 13 - Escriu una consulta per trobar els restaurants que no preparen menjar  'American ', tenen alguna nota 'A' i no pertanyen a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent
db.restaurants.find({ name: /^Wil/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 14 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Wil' en les tres primeres lletres en el seu nom
db.restaurants.find({ name: /ces$/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 15 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'ces' en les últimes tres lletres en el seu nom
db.restaurants.find({ name: /Reg/ }, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 16 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Reg' en qualsevol lloc del seu nom
db.restaurants.find({ borough: "Bronx", cuisine: {$in: ["American ", "Chinese"]} }); // 17 - Escriu una consulta per trobar els restaurants que pertanyen al Bronx i preparen plats americans o xinesos
db.restaurants.find({ borough: {$in: ["Staten Island","Queens","Bronx","Brooklyn"]}},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 18 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per aquells restaurants que pertanyen a Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({ borough: {$not:{$in: ["Staten Island","Queens","Bronx","Brooklyn"]}}},{restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 19 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que NO pertanyen a Staten Island, Queens, Bronx o Brooklyn
db.restaurants.find({ grades: { $elemMatch: { score: { $lt: 10} } } },{restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // 20 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin una nota menor que 10
db.restaurants.find({ $or: [{cuisine: { $in: ["Seafood", "American ", "Chinese"] }}, {name: /^Wil/} ] },{restaurant_id: 1, name: 1, borough: 1, cuisine: 1 }); // TODO: DUDA: Si preparan marisco no pueden se American o Chinese...  // 21 - Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen marisc ('seafood') excepte si son 'American', 'Chinese' o el name del restaurant comença amb lletres 'Wil'
db.restaurants.find({ grades: { $elemMatch: { date: new Date("2014-08-11T00:00:00Z"), grade: "A" , score: 11} } },{ restaurant_id: 1, name: 1, grades: 1 }); // 22 - Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants que aconsegueixin un grade de "A" i un score de 11 amb un ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({ "grades.1.grade": "A", "grades.1.score": 9, "grades.1.date": new Date("2014-08-11T00:00:00Z")},{restaurant_id: 1, name: 1, grades: 1}); // 23 - Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de l'array de graus conté un grade de "A" i un score 9 amb un ISODate "2014-08-11T00:00:00Z"
db.restaurants.find({ "address.coord.1": {$gt: 42, $lt:52} },{ restaurant_id: 1, name: 1, "address.coord": 1 } ); // 24 - Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element del array coord conté un valor entre 42 i 52
db.restaurants.find().sort({name: 1}); // 25 - Escriu una consulta per organitzar el nom dels restaurants en ordre ascendent juntament amb totes les columnes
db.restaurants.find().sort({name: -1}); // 26 - Escriu una consulta per organitzar el nom dels restaurants en ordre descendent juntament amb totes les columnes
db.restaurants.find().sort({cuisine: 1, borough: -1}); // 27 - Escriu una consulta per organitzar el nom de la cuisine en ordre ascendent i el barri en ordre descendent
db.restaurants.find({ "address.street": false },{name: 1, address: 1}); // Parece que todas las calles están...¿? // 28 - Escriu una consulta per saber si les direccions contenen el carrer
db.restaurants.find({ "address.coord.0": { $type: 1 }}); // parece que todos son double...¿? // 29 - Escriu una consulta que seleccioni tots el documents en la col·lecció de restaurants on els valors del camp coord és de tipus Double
db.restaurants.find({ grades: { $elemMatch: { score: { $mod: [7,0] } } } },{ restaurant_id: 1, name: 1, grades: 1 }); // 30 - Escriu una consulta que seleccioni el restaurant_id, name i grade per a aquells restaurants que retornen 0 com a residu després de dividir algun dels seus score per 7
db.restaurants.find({ name : /mon/ },{name: 1, borough: 1, "address.coord": 1, cuisine: 1}); // 31 - Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que contenen 'mon' en algun lloc del seu name
db.restaurants.find({ name : /^Mad/ },{name: 1, borough: 1, "address.coord": 1, cuisine: 1}); // 32 - Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que conteinen 'Mad' com a primeres tres lletres del seu name


// https://programmerclick.com/article/40251812030/
// https://geekflare.com/es/mongodb-queries-examples/
// 17 >17 >24